{"remainingRequest":"/Users/harrybeckwith/Desktop/vue-port-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/harrybeckwith/Desktop/vue-port-master/src/components/InfiniteScroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/harrybeckwith/Desktop/vue-port-master/src/components/InfiniteScroll.vue","mtime":1582707428000},{"path":"/Users/harrybeckwith/Desktop/vue-port-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/harrybeckwith/Desktop/vue-port-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/harrybeckwith/Desktop/vue-port-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/harrybeckwith/Desktop/vue-port-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBBY2NvcmRpb24gZnJvbSAiLi9BY2NvcmRpb24udnVlIjsKaW1wb3J0IGluZmluaXRlU2Nyb2xsIGZyb20gJ3Z1ZS1pbmZpbml0ZS1zY3JvbGwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkZvcm1WYWxpZGF0aW9uIiwKICAgZGlyZWN0aXZlczoge2luZmluaXRlU2Nyb2xsfSwKICBjb21wb25lbnRzOiB7CiAgICBBY2NvcmRpb24KICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwaG90b0ZlZWQ6IFtdLAogICAgICBhY3RpdmVBY2NvcmRpb246IG51bGwsCiAgICAgIGJ1c3k6IGZhbHNlLAogICAgICBjb3VudDogMTAsCiAgICAgIG5vdEZvdW5kOiBmYWxzZSwKCiAgICB9OwogIH0sCiAgIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmxvYWRNb3JlKCk7CiAgfSwKICBtb3VudGVkKCkgewogICB0aGlzLmluaXRpYWxMb2FkKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0aWFsTG9hZCgpIHsKIGF4aW9zCiAgICAgIC5nZXQoYGh0dHBzOi8vcGljc3VtLnBob3Rvcy92Mi9saXN0P2xpbWl0PSR7dGhpcy5jb3VudH1gKQogICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5waG90b0ZlZWQgPSByZXNwb25zZS5kYXRhOwogICAgICB9KQogICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKTsKICAgIH0sCiAgbG9hZE1vcmUoKSB7CiAgICAvLyBwcmV2ZW50IHNjcm9sbGluZyB3aGVuIHNlYXJjaGVkIGJ5IGlkCiAgICAgIGlmKHRoaXMucGhvdG9GZWVkLmxlbmd0aCA+PSAxMCkgewogICAgICAvLyBpbmNyZWFzZSBieSBvbmUgaXRlbSBwZXIgc2Nyb2xsCiAgICAgIHRoaXMuY291bnQgKz0gMTsKICAgICAgLy8gY2FsbCB0byBnZXQgaW5jcmVhc2luZyBsaW1pdCBlYWNoIHRpbWUKICAgICAgYXhpb3MuZ2V0KGBodHRwczovL3BpY3N1bS5waG90b3MvdjIvbGlzdD9saW1pdD0ke3RoaXMuY291bnR9YCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgLy8gc2V0IHRoZSBwaG90b2ZlZWQgdG8gdGhlIG5ldyBhbW91bnQKICAgICAgICB0aGlzLnBob3RvRmVlZCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgLy8gc3RvcCBsb2FkaW5nIG9uIHNjcm9sbAogICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlOwogICAgICB9KTsKICAgICAgfQoKICAgIH0sCiAgICBzZWFyY2hJRChzZWFyY2gpIHsKICAgICAgLy8gZ2V0IHVzZXIgaWQgc2VhcmNoCiAgICAgIGNvbnN0IGlkID0gc2VhcmNoLnRhcmdldC52YWx1ZTsKICAgICAgLy8gY2hlY2sgaWYgbm90IGVtcHR5CiAgICAgIGlmKGlkICE9PSAnJykgewogICAgICBjb25zdCBhcnIgPSBbXTsKICAgICAgYXhpb3MKICAgICAgLmdldChgaHR0cHM6Ly9waWNzdW0ucGhvdG9zL2lkLyR7aWR9L2luZm8vP2dyYXlzY2FsZSZibHVyPTJgKQogICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgLy8gaXRlbXMgaGF2ZSBiZWVuIGZvdW5kCiAgICAgICAgdGhpcy5ub3RGb3VuZCA9IGZhbHNlOwogICAgICAgIC8vIHB1c2ggZm91bmQgaXRlbSB0byBhcnIKICAgICAgICBhcnIucHVzaChyZXNwb25zZS5kYXRhKTsKICAgICAgICAvLyB1cGRhdGUgdGhlIGRhdGEgdG8gZGlzcGxheSBmb3VuZCBpZCBpdGVtCiAgICAgICAgdGhpcy5waG90b0ZlZWQgPSBhcnI7CiAgICAgIH0pCiAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgICAvLyBpZiBpZCB0eXBlZCB3YXMgbm90IG5vdCBmb3VuZCAtIGRpc3BsYXkgZXJyb3IgbWVzc2FnZQogICAgICAgIHRoaXMubm90Rm91bmQgPSB0cnVlOwogICAgICAKICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gaWYgZW1wdHkgc2VhcmNoIGRpc3BsYXkgZmlyc3QgdGVuIGZyb20gaW50aWFsIGNhbGwKICAgICAgICB0aGlzLmluaXRpYWxMb2FkKCk7CiAgICAgIH0KCiAgICB9LAogIH0KfTsK"},{"version":3,"sources":["InfiniteScroll.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"InfiniteScroll.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1 class=\"title\">Infinite scroll - with accordion </h1>\n    <p>The below adds items from an api call from <a class=\"link\" href =\"https://picsum.photos\">picsum.photos</a>. \n    Using the Accordion component we can pass the call items into this to make use of a dropdown \n    allowing space to be saved on the page.</p>\n    <p>One problem with making this type of call is that it could return 1000's of results. \n      This could be costly for the user in terms of speed. One way around this is to limit the number of\n      calls from the api. However we need to see the data. Infinite scroll is a great solution. Using this \n      we can increase the number of calls once the user reaches the bottom of the page/area.</p>\n      <p>Adding in <a class=\"link\" href =\"https://github.com/ElemeFE/vue-infinite-scroll\">vue-infinite-scroll</a>\n       is very easy and works smoothly.</p>\n    <h3 class=\"title title--page\">Get source code:</h3>\n    <a class=\"link\" href =\"https://github.com/harrybeckwith/vue-port/blob/master/src/components/FormValidation.vue\">\n    View code on github.\n    </a>\n        <h3 class=\"title title--page\">Functionality of the code:</h3>\n        <ul class=\"list list--bullet\">\n          <li>\n            You can open the accordion up to see the photo by clicking the arrow.\n          </li>\n          <li> \n            Search for a photo via id\n          </li>\n          <li> \n            Scroll to the bottom and load more items\n          </li>\n        </ul>\n      <p>Api items loaded: {{ photoFeed.length }}</p>\n    <div v-infinite-scroll=\"loadMore\" :infinite-scroll-disabled=\"busy\" infinite-scroll-distance=\"10\"></div>\n    <input type=\"text\" placeholder=\"Search via ID\" @keyup=\"searchID($event)\">\n    <div class=\"photo-feed\" v-if=\"!notFound\">\n      <Accordion :accordionData=\"photoFeed\" v-for=\"(item, i) in photoFeed\" :key=\"i\" :current=\"i\">\n        <template v-slot:accordion-title>\n          <div class=\"accordion__container\">\n            <p class=\"accordion__title\">Author: {{ photoFeed[i].author }}</p>\n            <p class=\"accordion__title\">ID:{{ photoFeed[i].id }}</p>\n          </div>\n        </template>\n        <template v-slot:accordion-content>\n          <img class=\"accordion__img\" :src=\"photoFeed[i]['download_url']\">\n        </template>\n      </Accordion>\n    </div>\n    <div v-else>not found</div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport Accordion from \"./Accordion.vue\";\nimport infiniteScroll from 'vue-infinite-scroll';\nexport default {\n  name: \"FormValidation\",\n   directives: {infiniteScroll},\n  components: {\n    Accordion\n  },\n  data() {\n    return {\n      photoFeed: [],\n      activeAccordion: null,\n      busy: false,\n      count: 10,\n      notFound: false,\n\n    };\n  },\n   created() {\n    this.loadMore();\n  },\n  mounted() {\n   this.initialLoad();\n  },\n  methods: {\n    initialLoad() {\n axios\n      .get(`https://picsum.photos/v2/list?limit=${this.count}`)\n      .then(response => {\n        this.photoFeed = response.data;\n      })\n      .catch(error => console.log(error));\n    },\n  loadMore() {\n    // prevent scrolling when searched by id\n      if(this.photoFeed.length >= 10) {\n      // increase by one item per scroll\n      this.count += 1;\n      // call to get increasing limit each time\n      axios.get(`https://picsum.photos/v2/list?limit=${this.count}`).then(response => {\n        // set the photofeed to the new amount\n        this.photoFeed = response.data;\n        // stop loading on scroll\n        this.busy = false;\n      });\n      }\n\n    },\n    searchID(search) {\n      // get user id search\n      const id = search.target.value;\n      // check if not empty\n      if(id !== '') {\n      const arr = [];\n      axios\n      .get(`https://picsum.photos/id/${id}/info/?grayscale&blur=2`)\n      .then(response => {\n        // items have been found\n        this.notFound = false;\n        // push found item to arr\n        arr.push(response.data);\n        // update the data to display found id item\n        this.photoFeed = arr;\n      })\n      .catch(error => {\n      console.log(error)\n      // if id typed was not not found - display error message\n        this.notFound = true;\n      \n      });\n      } else {\n        // if empty search display first ten from intial call\n        this.initialLoad();\n      }\n\n    },\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.photo-feed {\n  margin-top: 2rem;\n}\n.accordion {\n  &__img {\n    width: 300px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n  }\n\n  &__container {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  &__title {\n    margin: 0;\n  }\n  &__inside {\n    display: none;\n  }\n  &__active {\n    background-color: purple;\n  }\n}\n.accordion__active .accordion__inside {\n  display: block;\n}\n</style>"]}]}